-module(ice18).



%% ----------------------------------------
%% Import helper functions

-export([act_ptp_A_16/0,
	act_ptp_B_16/0,
	act_ptp_C_16/0,
	act_ptp_A_12/0,
	act_ptp_B_12/0,
	act_ptp_C_12/0,
	act_ptp_A_9/0,
	act_ptp_B_9/0,
	act_ptp_C_9/0,
	loop_ptp_A_19/0,
	loop_ptp_B_19/0,
	loop_ptp_C_19/0,
	ptp_A_fun/0,
	ptp_B_fun/0,
	ptp_C_fun/0,
	main/0,
	sel_act/4,
	loop_sel/3]).

%% ----------------------------------------
%% The code to chose a branch...trivial for the moment

-import(rgg_support,
	[notify/3,
	getBranch/2,
	getBranch/1,
	debug/3,
	debugLoop/0,
	lookup/2,
	smartReg/2]).

-import(trace,
	[rnd/0]).


sel_act(_, CP, P, Branch) ->
    %% choose one of the branches
    Sel = Branch(),
    %% send the selection to each participant
    notify(CP, Sel, P).



loop_sel(CP, P, V) ->
   case V of
	0 -> lists:foreach(fun(X) -> X ! {CP, exitLoop} end, P),
	     rgg_support:debug("exiting loop ~p", [CP], rgg_support:debugLoop());
	_ -> lists:foreach(fun(X) -> rgg_support:debug("[~p] 	 ~p ! loopBack", [CP, X], 1), X ! {CP, loopBack} end, P),
	     rgg_support:debug("looping back ~p. V = ~p", [CP, V], rgg_support:debugLoop()),
	     loop_sel(CP, P, V - 1)
    end.


revMod() -> std. 

loop_ptp_C_19() ->
	debug("[~p]   ~p ! ~p : ~p", [18, ptp_C, ptp_A, [auth]], 1),
ptp_A ! {18, auth},
act_ptp_C_16(),
done_ptp_C,
	receive
		{19, loopBack} -> loop_ptp_C_19();
		{19, exitLoop} -> exitLoop
end.

loop_ptp_B_19() ->
	receive {17, authReq} -> debug("[~p]   ~p ? ~p : ~p", [17, ptp_A, ptp_B, [authReq]], 1) end,
spawn(ice18,sel_act,[[], 16, [ptp_A, ptp_B, ptp_C], fun() -> getBranch([16, rnd()], bra) end]),
act_ptp_B_16(),
done_ptp_B,
	receive
		{19, loopBack} -> loop_ptp_B_19();
		{19, exitLoop} -> exitLoop
end.

loop_ptp_A_19() ->
	receive {18, auth} -> debug("[~p]   ~p ? ~p : ~p", [18, ptp_C, ptp_A, [auth]], 1) end,
debug("[~p]   ~p ! ~p : ~p", [17, ptp_A, ptp_B, [authReq]], 1),
ptp_B ! {17, authReq},
act_ptp_A_16(),
done_ptp_A,
	receive
		{19, loopBack} -> loop_ptp_A_19();
		{19, exitLoop} -> exitLoop
end.



%% ----------------------------------------
%% ptp_A at the choice at 9

act_ptp_A_9() -> 
	receive
	{9, branch_1} -> 
		receive {8, allow} -> debug("[~p]   ~p ? ~p : ~p", [8, ptp_B, ptp_A, [allow]], 1) end,
debug("[~p]   ~p ! ~p : ~p", [7, ptp_A, ptp_C, [money]], 1),
ptp_C ! {7, money},
done_ptp_A;
		{9, branch_2} -> 
		receive {6, deny} -> debug("[~p]   ~p ? ~p : ~p", [6, ptp_B, ptp_A, [deny]], 1) end,
debug("[~p]   ~p ! ~p : ~p", [5, ptp_A, ptp_C, [bye]], 1),
ptp_C ! {5, bye},
done_ptp_A
	end.
	

%% ----------------------------------------
%% ptp_B at the choice at 9

act_ptp_B_9() -> 
	receive
	{9, branch_1} -> 
		debug("[~p]   ~p ! ~p : ~p", [8, ptp_B, ptp_A, [allow]], 1),
ptp_A ! {8, allow},
done_ptp_B;
		{9, branch_2} -> 
		debug("[~p]   ~p ! ~p : ~p", [6, ptp_B, ptp_A, [deny]], 1),
ptp_A ! {6, deny},
done_ptp_B
	end.
	

%% ----------------------------------------
%% ptp_C at the choice at 9

act_ptp_C_9() -> 
	receive
	{9, branch_1} -> 
		receive {7, money} -> debug("[~p]   ~p ? ~p : ~p", [7, ptp_A, ptp_C, [money]], 1) end,
done_ptp_C;
		{9, branch_2} -> 
		receive {5, bye} -> debug("[~p]   ~p ? ~p : ~p", [5, ptp_A, ptp_C, [bye]], 1) end,
done_ptp_C
	end.
	

%% ----------------------------------------
%% ptp_A at the choice at 12

act_ptp_A_12() -> 
	receive
	{12, branch_1} -> 
		receive {11, withdraw} -> debug("[~p]   ~p ? ~p : ~p", [11, ptp_C, ptp_A, [withdraw]], 1) end,
debug("[~p]   ~p ! ~p : ~p", [10, ptp_A, ptp_B, [authWithdrawal]], 1),
ptp_B ! {10, authWithdrawal},
act_ptp_A_9(),
done_ptp_A;
		{12, branch_2} -> 
		receive {4, checkBalance} -> debug("[~p]   ~p ? ~p : ~p", [4, ptp_C, ptp_A, [checkBalance]], 1) end,
debug("[~p]   ~p ! ~p : ~p", [3, ptp_A, ptp_B, [getBalance]], 1),
ptp_B ! {3, getBalance},
debug("[~p]   ~p ! ~p : ~p", [2, ptp_A, ptp_C, [balance]], 1),
ptp_C ! {2, balance},
done_ptp_A;
		{12, branch_3} -> 
		receive {1, quit} -> debug("[~p]   ~p ? ~p : ~p", [1, ptp_C, ptp_A, [quit]], 1) end,
done_ptp_A
	end.
	

%% ----------------------------------------
%% ptp_B at the choice at 12

act_ptp_B_12() -> 
	receive
	{12, branch_1} -> 
		receive {10, authWithdrawal} -> debug("[~p]   ~p ? ~p : ~p", [10, ptp_A, ptp_B, [authWithdrawal]], 1) end,
spawn(ice18,sel_act,[[], 9, [ptp_A, ptp_B, ptp_C], fun() -> getBranch([9, rnd()], bra) end]),
act_ptp_B_9(),
done_ptp_B;
		{12, branch_2} -> 
		receive {3, getBalance} -> debug("[~p]   ~p ? ~p : ~p", [3, ptp_A, ptp_B, [getBalance]], 1) end,
done_ptp_B
	end.
	

%% ----------------------------------------
%% ptp_C at the choice at 12

act_ptp_C_12() -> 
	receive
	{12, branch_1} -> 
		debug("[~p]   ~p ! ~p : ~p", [11, ptp_C, ptp_A, [withdraw]], 1),
ptp_A ! {11, withdraw},
act_ptp_C_9(),
done_ptp_C;
		{12, branch_2} -> 
		debug("[~p]   ~p ! ~p : ~p", [4, ptp_C, ptp_A, [checkBalance]], 1),
ptp_A ! {4, checkBalance},
receive {2, balance} -> debug("[~p]   ~p ? ~p : ~p", [2, ptp_A, ptp_C, [balance]], 1) end,
done_ptp_C;
		{12, branch_3} -> 
		debug("[~p]   ~p ! ~p : ~p", [1, ptp_C, ptp_A, [quit]], 1),
ptp_A ! {1, quit},
done_ptp_C
	end.
	

%% ----------------------------------------
%% ptp_A at the choice at 16

act_ptp_A_16() -> 
	receive
	{16, branch_1} -> 
		receive {15, denied} -> debug("[~p]   ~p ? ~p : ~p", [15, ptp_B, ptp_A, [denied]], 1) end,
debug("[~p]   ~p ! ~p : ~p", [14, ptp_A, ptp_C, [authFail]], 1),
ptp_C ! {14, authFail},
done_ptp_A;
		{16, branch_2} -> 
		receive {13, granted} -> debug("[~p]   ~p ? ~p : ~p", [13, ptp_B, ptp_A, [granted]], 1) end,
act_ptp_A_12(),
done_ptp_A
	end.
	

%% ----------------------------------------
%% ptp_B at the choice at 16

act_ptp_B_16() -> 
	receive
	{16, branch_1} -> 
		debug("[~p]   ~p ! ~p : ~p", [15, ptp_B, ptp_A, [denied]], 1),
ptp_A ! {15, denied},
done_ptp_B;
		{16, branch_2} -> 
		debug("[~p]   ~p ! ~p : ~p", [13, ptp_B, ptp_A, [granted]], 1),
ptp_A ! {13, granted},
act_ptp_B_12(),
done_ptp_B
	end.
	

%% ----------------------------------------
%% ptp_C at the choice at 16

act_ptp_C_16() -> 
	receive
	{16, branch_1} -> 
		receive {14, authFail} -> debug("[~p]   ~p ? ~p : ~p", [14, ptp_A, ptp_C, [authFail]], 1) end,
done_ptp_C;
		{16, branch_2} -> 
		spawn(ice18,sel_act,[[], 12, [ptp_A, ptp_B, ptp_C], fun() -> getBranch([12, rnd()], bra) end]),
act_ptp_C_12(),
done_ptp_C
	end.
	

%% ----------------------------------------
%% Coordinating start / end of ptp_A

ptp_A_fun() ->
	receive {go, Pid} -> loop_ptp_A_19(),
done_ptp_A, Pid ! done_actor
end.


%% ----------------------------------------
%% Coordinating start / end of ptp_B

ptp_B_fun() ->
	receive {go, Pid} -> loop_ptp_B_19(),
done_ptp_B, Pid ! done_actor
end.


%% ----------------------------------------
%% Coordinating start / end of ptp_C

ptp_C_fun() ->
	receive {go, Pid} -> debug("[~p]	 Selector started", [19], 1),
spawn(ice18, loop_sel, [19, [ptp_A, ptp_B, ptp_C], lookup(rnd(),19)]),
loop_ptp_C_19(),
done_ptp_C, Pid ! done_actor
end.


%% ----------------------------------------
%% Let's start...

main() -> 
	smartReg(ptp_A, spawn(ice18, ptp_A_fun, [])),
	smartReg(ptp_B, spawn(ice18, ptp_B_fun, [])),
	smartReg(ptp_C, spawn(ice18, ptp_C_fun, [])),
	STime = os:system_time(),ptp_A ! {go, self()},
	ptp_B ! {go, self()},
	ptp_C ! {go, self()},
	receive done_actor -> ok end,
	receive done_actor -> ok end,
	receive done_actor -> ok end,
{_, CTime} = statistics(runtime),file:write_file(".time.tmp", integer_to_list(os:system_time() - STime)).
